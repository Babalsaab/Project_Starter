#!/usr/bin/env tsx

import fs from 'fs/promises';
import path from 'path';
import { program } from 'commander';

interface ProjectConfig {
  name: string;
  type: string;
  description?: string;
  targetAudience?: string;
  businessModel?: string;
}

async function generateMasterPRD(config: ProjectConfig) {
  console.log(`üöÄ Generating Master PRD for: ${config.name}`);
  
  try {
    // Read the master PRD template
    const templatePath = path.join(process.cwd(), 'prd-system/templates/core-16/master-prd-template.md');
    const template = await fs.readFile(templatePath, 'utf-8');
    
    // Replace template variables
    let customizedPRD = template
      .replace(/\[Project Name\]/g, config.name)
      .replace(/\[Your project name\]/g, config.name)
      .replace(/\[Project Type\]/g, config.type)
      .replace(/\[Date\]/g, new Date().toLocaleDateString())
      .replace(/\[Your company name\]/g, 'Your Company')
      .replace(/\[Product Owner Name\]/g, 'Product Owner');
    
    if (config.description) {
      customizedPRD = customizedPRD.replace(
        /\[One sentence describing the ultimate goal\]/g, 
        config.description
      );
    }
    
    // Create output directory
    const outputDir = path.join(process.cwd(), 'generated-prds', config.name.toLowerCase().replace(/\s+/g, '-'));
    await fs.mkdir(outputDir, { recursive: true });
    
    // Write the customized PRD
    const outputPath = path.join(outputDir, 'master-prd.md');
    await fs.writeFile(outputPath, customizedPRD);
    
    console.log(`‚úÖ Master PRD generated successfully: ${outputPath}`);
    
    // Generate a simple project summary
    const summary = generateProjectSummary(config);
    const summaryPath = path.join(outputDir, 'project-summary.md');
    await fs.writeFile(summaryPath, summary);
    
    console.log(`üìù Project summary created: ${summaryPath}`);
    
    return outputPath;
    
  } catch (error) {
    console.error('‚ùå Error generating Master PRD:', error);
    throw error;
  }
}

function generateProjectSummary(config: ProjectConfig): string {
  return `# ${config.name} - Project Summary

## Generated: ${new Date().toLocaleDateString()}

### Project Details
- **Name**: ${config.name}
- **Type**: ${config.type}
- **Description**: ${config.description || 'No description provided'}
- **Target Audience**: ${config.targetAudience || 'To be defined'}
- **Business Model**: ${config.businessModel || 'To be defined'}

### Generated Documents
- ‚úÖ Master PRD

### Next Steps
1. Review and customize the Master PRD
2. Generate specialized PRDs using: \`npm run generate:core-prds\`
3. Add project-specific details and requirements
4. Share with stakeholders for review and approval

### Available Commands
\`\`\`bash
# Generate all core PRDs
npm run generate:core-prds --project="${config.name}"

# Generate specialized PRDs
npm run generate:specialized-prds --project="${config.name}"

# Generate design and task documents
npm run generate:design --project="${config.name}"
npm run generate:tasks --project="${config.name}"
\`\`\`

---
*Generated by TaskFlow PRD Generation System*
`;
}

// CLI interface
program
  .name('generate-master-prd')
  .description('Generate a Master PRD from template')
  .requiredOption('-n, --name <name>', 'Project name')
  .option('-t, --type <type>', 'Project type', 'Web Application')
  .option('-d, --description <description>', 'Project description')
  .option('-a, --audience <audience>', 'Target audience')
  .option('-b, --business <business>', 'Business model')
  .action(async (options) => {
    const config: ProjectConfig = {
      name: options.name,
      type: options.type,
      description: options.description,
      targetAudience: options.audience,
      businessModel: options.business
    };
    
    try {
      await generateMasterPRD(config);
    } catch (error) {
      process.exit(1);
    }
  });

// Parse CLI arguments if this script is run directly
if (require.main === module) {
  program.parse();
}

export { generateMasterPRD };